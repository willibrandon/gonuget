name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: false

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Build
      run: go build ./...

    - name: Vet
      run: go vet ./...

    - name: Verify dependencies
      shell: bash
      run: |
        go mod tidy -v
        git diff --exit-code go.mod
        if [ -f go.sum ]; then git diff --exit-code go.sum; fi

    - name: Compile benchmarks
      shell: bash
      run: go list ./... | xargs go test -run=^$ -bench=.

    - name: Start observability stack for integration and E2E tests
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd observability
        docker compose -f docker-compose.test.yml up -d --wait
        echo "Jaeger UI: http://localhost:16686"
        echo "Prometheus UI: http://localhost:9090"

    - name: Run unit tests
      run: go test -short -v ./...

    - name: Run all tests (including integration)
      run: go test -v ./...

    - name: Coverage report
      if: matrix.os == 'ubuntu-latest'
      run: |
        go test -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out

    - name: Stop observability stack
      if: matrix.os == 'ubuntu-latest' && always()
      run: |
        cd observability
        docker compose -f docker-compose.test.yml down

    - name: Build library interop CLI
      shell: bash
      run: |
        cd cmd/nuget-interop-test
        go build -o ../../tests/nuget-client-interop/gonuget-interop-test

    - name: Run NuGet.Client interop tests
      shell: bash
      run: |
        cd tests/nuget-client-interop
        make test

    - name: Run CLI interop tests
      shell: bash
      run: |
        cd tests/cli-interop
        make test
